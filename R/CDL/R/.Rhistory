library(CDL)
help('CDL')
source("CDLR.R")
reproduceMST()
reproduce()
source("cdl_demo.R")
source("cdl_find_change.R")
SIAM_demo()
SIAM_demo(10)
source("cdl_distance_pvalue.R")
SIAM_demo(10)
source("cdl_interface_timeseries.R")
SIAM_demo(10)
webstateheader
source("cdl_interface.R")
SIAM_demo(10)
lsf.str("package:CDL")
ls("package:CDL")
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
ls
ls()
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
ParametricConfigTimeSeries
exampleTimeSeriesScalarF(type="None",gen=generateSequenceMedian,T=100,DF=TRUE)
exampleTimeSeriesScalarF(type="Holt-Winters",gen=generateSequenceMedian,T=100,DF=TRUE)
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
source("cdl_fft.R")
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
source("cdl_distance_Measure.R")
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
source("cdl_quantile.R")
exampleTimeSeriesScalarF(type="non-parametric",gen=generateSequenceMedian,T=100,DF=TRUE)
quit()
n
library(CDL)
ls()
ls("package:CDL")
T = M3("Kernels",250,d,createMixing,100)
source("CDLR.R")
T = M3("Kernels",250,d,createMixing,100)
ls()
M3
T = createM(10,10000,200)
T
Smolatest(10, 100)
Smolatest
state=""
SmolaSmolatestSmolatesttest(10, 100)
Smolatest(10, 100)
library(CDL)
source("CDLR.R")
Smolatest(10,10)
state = ""
Smolatest(10,10)
library(CDL)
source("CDLR.R")
Smolatest(10,10)
source("CDLR.R")
Smolatest(10,10)
n
library(CDL)
source("CDLR.R")
Smolatest(10,10)
library(CDL)
source("CDLR.R")
source("CDLR.R")
Smolatest(10,10)
source("CDLR.R")
Smolatest(10,10)
3
library("CDL")
source("cdl_interface")
library(CDL)
source("cdl_interface.R")
source("cdl_interface_timeseries.R")
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_find_change.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=FALSE) 
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_interface.R")
source("cdl_distance_Measure.R"
)
source("cdl_distance_pvalue.R"
)
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
source("cdl_quantile.R")
exampleTimeSeriesScalarF(type="non-parametric",T=100,DF=TRUE) 
exampleTimeSeriesScalarF(type="non-parametric",T=1000,DF=TRUE) 
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
source("cdl_quantile.R")
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
source("cdl_demo.R")
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
source("cdl_distance_pvalue.R")
exampleTimeSeriesScalarF(type="non-parametric",T=200,DF=TRUE) 
quit()
n
library(CDL)
source('CDLR.R')
source('CDLR.R')
Smolatest(10,10)
source('CDLR.R')
Smolatest(10,1)
library(CDL)
quit
quit()
n
library(CDL)
source('CDLR.R')
Smolatest(10,1)
library(CDL)
source('CDLR.R')
Smolatest(10,1)
library(CDL)
source('CDLR.R')
Smolatest(2,1)
Smolatest(10,1)
Smolatest(100,10)
reproduceMMD()
M3(200,200,[2,3,4], createM,1)
M3(PNON,200,200,[2,3,4], createM,1)
M3(200,200,c(2,3,4), createM,1)
SmolatestX(3,1,createM,PNON)
3
library(CDL)
source('CDLR.R')
PNON
SmolatestXM(2,1,createM,c(250,250,1,10),"Martingale", 250)
SmolatestXMEarly(2,1,createM,c(250,250,1,10),"Martingale", 250)
SmolatestXMEarly(2,1,createM,c(250,250,1,10),"Compression", 250)
SmolatestXMEarly(100,1,createM,c(250,250,1,10),"Compression", 250)
d = c(10)
reproduceMMD()
PKER
PNON
source('CDLR.R')
SmolatestXMEarlyP(3,1,createM,"Kernels", 200)
SmolatestXMEarlyP(20,1,createM,"Kernels", 200)
SmolatestXMEarlyP(20,1,createM,"Martingale", 200)
SmolatestXMEarlyP(20,1,createM,"Compression", 200)
source('CDLR.R')
SmolatestXMEarlyP(2000,1,createM,"Compression", 200)
library(CDL)
source('CDLR.R')
SmolatestXMEarlyP(100,1,createM,"Compression", 200)
SmolatestXMEarlyP(100,1,createV,"Compression", 200)
SmolatestXMEarlyP(100,1,createV,"Non-Parametric", 200)
PNON
PNON = c(200,200,1,0.2,0,1.0)
PNON = c(200,200,1,0.2,1,1.0)
SmolatestXMEarlyP(100,1,createV,"Non-Parametric", 200)
SmolatestXMEarlyP(10,1,createV,"Non-Parametric", 200)
SmolatestXMEarlyP(10,1,createV,"Non-Parametric", 300)
SmolatestXMEarlyP(10,1,createM,"Non-Parametric", 300)
PNON
PNON = c(200,200,1,0.2,0,1.0)
SmolatestXMEarlyP(500,1,createV,"Non-Parametric", 300)
SmolatestXMEarlyP(1000,1,createV,"Non-Parametric", 300)

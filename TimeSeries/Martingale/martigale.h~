#ifndef MARTIGALE_METHODS
#define MARTIGALE_METHODS 1

#include<math.h>

// interface for the alpah strangenes measure
typedef double (*Strangeness_pvalue_statistical_window)(StatisticalWindow *sw, SinglePoint *sp);
typedef double (*Strangeness_pvalue)(TimeSeries *ts, SinglePoint *sp, void *state);
typedef TimeSeries* (*martingale)(double *prev, double epsilon, double t, double lambda, TimeSeries *ts, void *state);


struct sstate { 
  int max;
  
  double prev_martingale;  double epsilon;  double t; double  lambda;  

  // previous samples
  Window *w;
  // series of p-values
  Window *pval;
  
  // 
  Window *unif_reference;


} ;

typedef struct sstate MartingaleState;


// coefficients as specified on Shen-Shyang Ho " A martingale framework for concept change in detection in time-varying data streams" ICML 2005
#define StochasticMartigale(ts,state,val,pval,m) stochastic_martingale(ts,state,val,pval,0.92,3,20,m,stochastic_distance_strangeness_pvalue)

#define ALLOCATE_MARTINGALE_STATE(s) { s = (MartingaleState*) malloc(sizeof(MartingaleState)); s->w = s->pval=s->unif_reference=0;   } 
#define FREE_MARTINGALE_STATE(s) { s = (MartingaleState*) malloc(sizeof(MartingaleState)); s->w = s->pval=s->unif_reference=0;   } 






#ifndef MARTINGALE_MODULE
#if defined(c_plusplus) || defined(__cplusplus) 
extern "C" {
#endif
  extern int binary_search_sorted_series(TimeSeries *ts, SinglePoint *sp);
  extern double stochastic_distance_strangeness_pvalue_statistical_window(Window *w, SinglePoint *sp);
  extern double stochastic_distance_strangeness_pvalue(TimeSeries *ts, SinglePoint *sp, void *state);

  extern TimeSeries * stochastic_martingale(TimeSeries *ts, MartingaleState **state, TimeSeries **val, TimeSeries **pval,  double epsilon,  double t,  double lambda, int M,  Strangeness_pvalue *pvalueofDistanceFunction); 
  extern MartingaleState *ReadMARPState(int identation, char **temp);
  extern char *PrintMartingaleState(MartingaleState *t, int identation, int P);

#if defined(c_plusplus) || defined(__cplusplus) 
}
#endif


#endif
